buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.1'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.1'
    }
}

apply plugin: 'android-library'
apply plugin: 'robolectric'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 18
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'NOTICE.txt'
        exclude 'NOTICE'
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java {
                srcDir 'src/main/java'
            }
            res {
                srcDir 'src/main/res'
            }
        }
        androidTest.setRoot('src/test')
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    androidTestCompile 'org.easytesting:fest-reflect:1.4.1'
    androidTestCompile 'org.easytesting:fest-util:1.2.5'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.3'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    testCompile 'org.easytesting:fest-reflect:1.4.1'
    testCompile 'org.easytesting:fest-util:1.2.5'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'junit:junit:4.12'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    task "javadoc$name"(type: Javadoc, dependsOn: "assemble$name") {
        description = "Generates javadoc for build $name"
        destinationDir = new File(destinationDir, variant.baseName)
        source = files(variant.javaCompile.source)
        classpath = files(android.getBootClasspath(), variant.javaCompile.classpath)
        exclude '**/R.html', '**/R.*.html', '**/index.html'
    }

    task "javadoc${name}Jar"(type: Jar, dependsOn: "javadoc$name") {
        classifier = 'javadoc'
        destinationDir = file('build/outputs/jar/')
        from tasks."javadoc$name".destinationDir
    }
}

task androidJar(type: Copy, dependsOn: assembleRelease) {
    from('build/intermediates/bundles/release/')
    into('build/outputs/jar/')
    include('classes.jar')
    rename ('classes.jar', 'jobqueue.jar')
}

task sourcesJar(type: Jar, dependsOn: assembleRelease) {
    classifier = 'sources'
    destinationDir = file('build/outputs/jar/')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
    //archives javadocReleaseJar
}