buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.3'
    }
}

apply plugin: 'com.android.library'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'NOTICE.txt'
        exclude 'NOTICE'
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java {
                srcDir 'src/main/java'
            }
            res {
                srcDir 'src/main/res'
            }
        }
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.easytesting:fest-reflect:1.4.1'
    androidTestCompile 'org.easytesting:fest-util:1.2.5'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.3'
    androidTestCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    testCompile 'org.easytesting:fest-reflect:1.4.1'
    testCompile 'org.easytesting:fest-util:1.2.5'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'junit:junit:4.12'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

import com.android.builder.core.DefaultManifestParser

def getVersionName(manifestFile) {
    def manifestParser = new DefaultManifestParser();
    return manifestParser.getVersionName(manifestFile);
}

def getVersionCode(manifestFile){
    def manifestParser = new DefaultManifestParser();
    return manifestParser.getVersionCode(manifestFile);
}

// Retrieve version information from Manifest
def manifestFile = file(android.sourceSets.main.manifest.srcFile);
def version = getVersionName(manifestFile)
def archivesVersionedName = "${archivesBaseName}-${version}"

// Produce versioned .aar output
android.libraryVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            def fileName = "${archivesVersionedName}.aar"
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    task "javadoc$name"(type: Javadoc, dependsOn: "assemble$name") {
        description = "Generates javadoc for build $name"
        destinationDir = new File(destinationDir, variant.baseName)
        source = files(variant.javaCompile.source)
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(android.getBootClasspath(), variant.javaCompile.classpath)
        exclude '**/R.html', '**/R.*.html', '**/index.html'
    }

    task "javadoc${name}Jar"(type: Jar, dependsOn: "javadoc$name") {
        classifier = 'javadoc'
        destinationDir = file('build/outputs/jar/')
        archiveName = "${archivesVersionedName}-javadoc.jar"
        from tasks."javadoc$name".destinationDir
    }
}

task androidJar(type: Copy, dependsOn: assembleRelease) {
    from('build/intermediates/bundles/release/')
    into('build/outputs/jar/')
    include('classes.jar')
    rename ('classes.jar', "${archivesVersionedName}.jar")
}

task sourcesJar(type: Jar, dependsOn: assembleRelease) {
    classifier = 'sources'
    destinationDir = file('build/outputs/jar/')
    archiveName = "${archivesVersionedName}-sources.jar"
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
    //archives javadocReleaseJar
}